#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include <ctype.h>
#include <semaphore.h>

int *okviri;
int *zahtjevi;
int broj_okvira;
int trenutni_zahtjev;
int zahtjevi_ukupno;
int counter = 0;
sem_t BINSEM;


void *stvoriZahtjeve(void *broj_zahtjeva) {
    int broj, i;

    broj = *(int *)broj_zahtjeva;

    srand(time(NULL));

    //stvaranje novih zahtjeva zaštićeno KO
    //stvori prvih N zahtjeva
    sem_wait(&BINSEM);
    for (i = 0; i < broj; i++) {
        zahtjevi[i] = rand() % 10;
        counter++;
    }
    sem_post(&BINSEM);

    //stvaraj nove zahtjeve svake sekunde
    for (i =0; i < broj; i++) {
        sleep(1);
        sem_wait(&BINSEM);
        zahtjevi[counter] = rand() % 10;
        counter++;
        sem_post(&BINSEM);
    }

    return NULL;
}

int optimalna () {
    int i, j, max = 0, izbaci;
    int *koliko;
    int *vrijeme;

    koliko = (int *) calloc(broj_okvira, sizeof(int));
    vrijeme = (int *) calloc(broj_okvira, sizeof(int));

    //početno svi zahtjevi u okvirima imaju isto vrijeme
    //ako je neki od zahtjeva koji čekaju isti onom u okviru,
    //onda se tom zahtjevu pridaje vrijeme jednako poziciji čekanja
    for (i = 0; i < broj_okvira; i++)
        vrijeme[i] = 100;

    for (i = 0; i < broj_okvira; i++) {
        for (j = 1; j < counter; j++) {
            if (okviri[i] == zahtjevi[j]) {
                koliko[i]++;
                //gleda se najranije pojavljivanje zahtjeva
                if (koliko[i] <= 1)
                    vrijeme[i] = j;
            }
        }
    }

    //nađi onaj okvir u kojem je zahtjev s najvećim vremenom
    //ako su 2 ista, izbacuje se zahtjev iz desnijeg okvira
    for (i = 0; i < broj_okvira; i++) {
        if (vrijeme[i] >= max) {
            max = vrijeme[i];
            izbaci = i;
        }
    }

    free(koliko);
    free(vrijeme);

    return izbaci;
}

int ispitaj (int n) {
    int i;
    int nasao = -2;

    for (i = 0; i < broj_okvira; i++) {
        //ako je pogodak
        if (okviri[i] == n) {
            nasao = -1;
            break;
        }

        //ako postoji prazan okvir
        else if (okviri[i] == -1) {
            nasao = i;
            break;
        }
    }

    if (nasao > (-2))
        return nasao;

    //inače je potrebna zamjena
    else
        nasao = optimalna();

    return nasao;
}

void ispisiStanje (int pogodak) {
    int i;

    //ispis samih zahtjeva
    for (i = 0; i < counter; i++) {
            printf("%d", zahtjevi[i]);
            if (i == ((counter) - 1))
                printf(" ");
            else
                printf(",");
    }

    //dodatno podešavanje ispisa
    if (zahtjevi_ukupno > 14)
        if ((counter) < 8)
            printf("\t");
    if ((counter) < 4)
        printf("\t");
    printf("\t%d  ", zahtjevi[0]);

    //ispis rezultata algoritma
    for (i = 0; i < broj_okvira; i++) {
        if (zahtjevi[0] == okviri[i] && pogodak == 0)
            printf("[%d] ", okviri[i]);
        else if (okviri[i] == -1)
            printf(" -  ");
        else if ((pogodak == 1) && (okviri[i] == zahtjevi[0]))
            printf("(%d) ", okviri[i]);
        else
            printf(" %d  ", okviri[i]);
    }

    if (pogodak == 1)
        printf(" #pogodak");

    printf("\n");
    }

int main (int argc, char **argv) {
    pthread_t thread;
    int i, x, k;
    int broj_zahtjeva;
    int pogodak;

    sem_init(&BINSEM, 0, 1);

    //uzmi parametre
    broj_okvira = atoi(argv[1]);
    broj_zahtjeva = atoi(argv[2]);

    zahtjevi_ukupno = 2*broj_zahtjeva;

    printf("Broj okvira: %d\n", broj_okvira);
    printf("Broj zahtjeva: %d\n", broj_zahtjeva);

    //alokacija memorije
    okviri = (int *) malloc(sizeof(int)*broj_okvira);
    zahtjevi = (int *) malloc(sizeof(int)*zahtjevi_ukupno);

    for (i = 0; i < broj_okvira; i++)
        okviri[i] = -1;

    for (i = 0; i < zahtjevi_ukupno; i++)
        zahtjevi[i] = -2;

    //početni ispis
    printf("Zahtjevi");
    for (i = 0; i < (zahtjevi_ukupno - 8 + 1); i++)
        printf(" ");
    printf("\t#N ");
    for (i = 0; i < broj_okvira; i++)
        printf(" %d  ", i+1);
    printf("\n");
    printf("-------------------------------------------------\n");

    //stvori pomocnu dretvu
    if (pthread_create(&thread, NULL, stvoriZahtjeve, ((void *)&broj_zahtjeva))) {
        printf("Ne može se stvoriti nova dretva\n");
        exit(1);
    }

    i = 0;

    //obrada zahtjeva svake sekunde
    while (i < zahtjevi_ukupno) {
        pogodak = 0;

        usleep(999000);

        //uzimanje zahtjeva zaštićeno KO
        sem_wait(&BINSEM);
        //nađi okvir za ovaj zahtjev
        x = ispitaj(zahtjevi[0]);

        if (x == -1)
            pogodak = 1;
        else
            okviri[x] = zahtjevi[0];

        ispisiStanje(pogodak);

        //izbaci iz polja obrađeni zahtjev
        counter--;
        for (k = 0; k < counter; k++)
            zahtjevi[k] = zahtjevi[k+1];

        zahtjevi = realloc(zahtjevi, sizeof(int) * counter);

        sem_post(&BINSEM);

        i++;
    }

    pthread_join(thread, NULL);

    free(okviri);
    free(zahtjevi);

    return 0;
}
