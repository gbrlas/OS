#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include <pthread.h>
#include <ctype.h>

struct okv{
   	int stranica;
	int daljina;
};
typedef struct okv okvi;
okvi *okvir;
pthread_t *dretva;
int j=0;
int br_okvira;
int br_zahtjeva;
int *zahtjevi,*zahtjevi2;
int popunjeno=0;
pthread_mutex_t m;
pthread_cond_t red1,red2;
okvi *pom;
int k;
   
void *generator(){
	pthread_mutex_lock(&m);
   	int i, broj,x;
   	zahtjevi=(int*) malloc(sizeof(int)*br_zahtjeva);
	zahtjevi2=(int*) malloc(sizeof(int)*br_zahtjeva);
   	broj=br_zahtjeva;
	x=2*br_zahtjeva;
   	for(i=0;i<br_zahtjeva;i++){
       		zahtjevi[i]=rand()%10;
		zahtjevi2[i]=zahtjevi[i];
	}
       	while(br_zahtjeva){
        	int pom;
           	sleep(1);

		pthread_cond_wait(&red1, &m);

           	for(i=0;i<br_zahtjeva-1;i++){
               		zahtjevi[i]=zahtjevi[i+1];
           	}
           	zahtjevi[br_zahtjeva-1]=rand()%10;
		zahtjevi2[x-broj]=zahtjevi[br_zahtjeva-1];
		if(broj)
			broj--;
		else
			br_zahtjeva--;
		pthread_cond_signal(&red2);
       	}
	pthread_mutex_unlock(&m);
}
 
int LRU_strategija(int zahtjev){
	int min, n,x,p, optimalan,i;
	int polje[11], u_polju[11];
	min=100;
	for (i=0;i<10;i++){
		polje[i]=100;
		u_polju[i]=0;	
	}
	if (popunjeno==0){
		k=1;
		popunjeno++;	
		return 0;
	}
	
			
	for(i=0; i<popunjeno; i++){
		if (okvir[i].stranica==zahtjev){
			k++;	
			return -1;
		}
	}
	if (popunjeno<br_okvira){
		k++;
		popunjeno++;
		return popunjeno-1;
	}
	
	for(j=1;j<k+1;j++){
		p=zahtjevi2[j];
               	polje[p]=j-1;
	}
	//provjerava koji su elementi u polju
	for (n=0;n<10;n++){
		for (j=0;j<br_okvira;j++){
			if (okvir[j].stranica==n){
				u_polju[n]=1;
			}
		}
	}
		for (n=0;n<10;n++){
			if ((polje[n]<min) && (u_polju[n]==1)){
				min=polje[n];
				x=n;
			}
		}
	
	for (j=0;j<br_okvira;j++){
		if (okvir[j].stranica==x){
			optimalan=j;
		}
	}
	k++;
	return optimalan;
}

ispis(int zahtjev_str, int pogodak){
	int i;
   	for(i=0;i<br_zahtjeva;i++){
       		printf("%d",zahtjevi[i]);
       		if(i==br_zahtjeva-1)
           		printf(" ");
       		else
           		printf(",");
   	}
	if(br_zahtjeva<4)printf("\t");
       	printf("\t%d  ",zahtjev_str);

   	for(i=0;i<br_okvira;i++){
       		if(zahtjev_str==okvir[i].stranica && pogodak==0){
           		printf("[%d] ",okvir[i].stranica);
       		}
		else if(okvir[i].stranica==-1)
			printf(" -  ");
       		else if(pogodak==1 && zahtjev_str==okvir[i].stranica)
        	   	printf("(%d) ",okvir[i].stranica);
		else
        	   	printf(" %d  ",okvir[i].stranica);
   	}
	if(pogodak==1)
		printf(" #pogodak");   
	printf("\n");
}

main(int argc, char *argv[]){
   	int i;
   	pthread_mutex_init(&m, NULL);
	pthread_cond_init(&red1,NULL);
	pthread_cond_init(&red2,NULL);

   	srand((unsigned)time (NULL));
   	br_okvira = atoi(argv[1]);
   	br_zahtjeva =atoi(argv[2]);
   	if (br_okvira<4 || br_okvira>10 || br_zahtjeva<5 || br_zahtjeva>20){
		exit(1);
   	}
     
   	dretva=(pthread_t*)malloc(sizeof(pthread_t)) ;
     
   	printf("Zahtjevi");
   	for(i=0;i<(br_zahtjeva*2-1-8+2);i++)
           	printf(" ");
   	printf("\t#N ");
   	for(i=0;i<br_okvira;i++)
       		printf(" %d  ", i+1);
	printf("\n");
   	printf("----------------------------------\n");      
           
   	okvir = (okvi* ) malloc(br_okvira*sizeof(okvi));
   	for (i=0; i<br_okvira; i++)
       		okvir[i].stranica = -1;
     
     
   	if(pthread_create(dretva, NULL, generator,NULL)!=0)exit(1);
	sleep(1);
   	int zamijeni,pogodak;
	pthread_mutex_lock(&m);
   	while(1){
		
		pthread_cond_signal(&red1);
		pthread_cond_wait(&red2, &m);
       		pogodak=0;
       		zamijeni=LRU_strategija(zahtjevi[0]);
       		if(zamijeni==-1)
           		pogodak=1;
       		else
           		okvir[zamijeni].stranica=zahtjevi[0];
       		if(br_zahtjeva)
			ispis(zahtjevi[0], pogodak);
		else
			break;
		
		
   	}
	pthread_mutex_unlock(&m);
   	pthread_join(*dretva, NULL);
   	return 0;
}